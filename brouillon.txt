label_names = {
    0 :"T-shirt/top",
    1 :"Trouser",
    2 :"Pullover",
    3 :"Dress",
    4 :"Coat",
    5 :"Sandal",
    6 :"Shirt",
    7 :"Sneaker",
    8 :"Bag",
    9 :'Ankle boot',
}

df = df_train.copy()
df['label'] = df.label.replace(label_names)




60 000 et 10 000
L'erreur de la machine est de  n_erreurs/n_essais  =  41.79 % (avant de retirer les arguments de randomforest)

L'erreur de la machine est de  n_erreurs/n_essais  =  11.709999999999999 % (après avoir retirer les arguments de randomforest) comparer les arguments avec ceux par défaut



https://openclassrooms.com/fr/courses/4297211-evaluez-les-performances-dun-modele-de-machine-learning/4308256-evaluez-un-algorithme-de-classification-qui-retourne-des-valeurs-binaires


questions à poser :
- faut-il faire plusieurs couches de neurones ? oui
- est-il mieux de s'entrainer à 100 échantillons par type d'objets ? ca devrait être mieux ( faire le test) équilibre de la base de données on peut écrire dans le rapport (en parler lorsque on fais un sous-ensemble
- le projet vaut pour combien de % ? a peu près équilibré
- les arguments de random forest comparer les arguments avec ceux par défaut


si je fais un classifieur aléatoire, quelle est l'éspérance
matrice de confusion

utiliser les outils du cours
interpreter les résultats
faire des recherches
aspects critiques
pas faire du hors sujet
réseaux de neurones convolutifs


faire un tabaleau moy precision, moy recall, exactitude ...

https://datascientest.com/danielcomment-lire-et-exploiter-une-matrice-de-confusion

configurer randomforest
https://www.it-swarm-fr.com/fr/python/comment-ajuster-les-parametres-dans-random-forest-en-utilisant-scikit-learn/823309376/

peut-on utiliser gridsearch ou alors il faut interpreter de nous memes ?

pour séparer sur excel : données - convertir

pour améliorer le classifieur
https://www.invivoo.com/ameliorer-performance-prediction-obtenue-machine-learning/

********************************************************************************************************************
# Print iterations progress
def printProgressBar (iteration, total, prefix = '', suffix = '', decimals = 1, length = 100, fill = '█'):
    """
    Call in a loop to create terminal progress bar
    @params:
        iteration   - Required  : current iteration (Int)
        total       - Required  : total iterations (Int)
        prefix      - Optional  : prefix string (Str)
        suffix      - Optional  : suffix string (Str)
        decimals    - Optional  : positive number of decimals in percent complete (Int)
        length      - Optional  : character length of bar (Int)
        fill        - Optional  : bar fill character (Str)
    """
    percent = ("{0:." + str(decimals) + "f}").format(100 * (iteration / float(total)))
    filledLength = int(length * iteration // total)
    bar = fill * filledLength + '-' * (length - filledLength)
    print('\r%s |%s| %s%% %s' % (prefix, bar, percent, suffix), end = '\r')
    # Print New Line on Complete
    if iteration == total:
        print()


#printProgressBar(0, n_test, prefix='Progress:', suffix='Complete', length=50)

     #time.sleep(0.1)
        #printProgressBar(i, n_test, prefix='Progress:', suffix='Complete', length=50)

***************** RESEAUX DE NEURONES ***************************

avec hidden layer size = (784,)


Génération du classifieur en cours ...
Le classifieur a été généré avec succès !

Temps de calcul de la génération :  1370.025992155075  secondes
La machine effectue le test ...

Temps de calcul du test :  356.05754470825195  secondes
matrice de confusion :
             T-shirt/top  Trouser  Pullover  ...  Sneaker  Bag  Ankle boot
T-shirt/top          843        0        14  ...        0   13           0
Trouser                0      978         5  ...        0    1           0
Pullover               9        1       813  ...        0    4           0
Dress                 19        9         9  ...        0    2           0
Coat                   1        2       115  ...        0    5           0
Sandal                 2        1         1  ...       28   10          24
Shirt                161        1        93  ...        0   13           0
Sneaker                0        0         0  ...      935    3          48
Bag                    4        1         2  ...        2  970           0
Ankle boot             0        0         0  ...       38    2         953

[10 rows x 10 columns]
analyse :
              precision    recall  f1-score   support

 T-shirt/top       0.81      0.84      0.83      1000
     Trouser       0.98      0.98      0.98      1000
    Pullover       0.77      0.81      0.79      1000
       Dress       0.89      0.91      0.90      1000
        Coat       0.83      0.76      0.79      1000
      Sandal       0.98      0.93      0.96      1000
       Shirt       0.67      0.65      0.66      1000
     Sneaker       0.93      0.94      0.93      1000
         Bag       0.95      0.97      0.96      1000
  Ankle boot       0.93      0.95      0.94      1000

    accuracy                           0.87     10000
   macro avg       0.87      0.87      0.87     10000
weighted avg       0.87      0.87      0.87     10000


